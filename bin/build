#!/usr/bin/env ruby

# frozen_string_literal: true

require 'bundler/setup'
require 'json'
require 'commons/builder'
require 'rest-client'
require 'commons/integrity'

URL = 'https://query.wikidata.org/sparql'

config = Config.new_from_file('config.json')

root_dir = Pathname.new('').dirname

branch_item_ids = []
actions = []
unknown_args = []

valid_actions = %w[update build check]

ARGV.each do |arg|
  if arg.start_with? 'Q'
    branch_item_ids.push arg
  elsif valid_actions.include? arg
    actions.push arg
  else
    unknown_args.push arg
  end
end

unless unknown_args.empty?
  STDERR.puts "Usage: #{$PROGRAM_NAME} update|build|check [branch ID] [...]"
  exit(1)
end

actions = valid_actions if actions.empty?

wikidata_client = WikidataClient.new
wikidata_labels = WikidataLabels.new(config: config, wikidata_client: wikidata_client)
wikidata_results_parser = WikidataResultsParser.new(languages: config.languages)

boundaries_dir = Dir.exist?('boundaries/build') ? 'boundaries/build' : 'boundaries'
boundary_data = BoundaryData.new(wikidata_labels, boundaries_dir: boundaries_dir)

position_data = PositionData.new(
  output_dir_pn: Pathname.new(boundaries_dir),
  wikidata_client: wikidata_client,
  config: config
)

if branch_item_ids.empty?
  position_data.update if actions.include? 'update'
  position_data.build if actions.include? 'build'
end

boundary_position_ids = boundary_data.popolo_areas.map { |a| a[:associated_wikidata_positions] }.flatten.to_set

%w[legislative executive].each do |political_entity_kind|
  political_entity_kind_dir = root_dir.join(political_entity_kind)
  index_file = political_entity_kind_dir.join('index.json')

  JSON.parse(index_file.read, symbolize_names: true).each do |political_entity_h|
    branch = Branch.for(political_entity_kind, political_entity_h)
    next unless branch_item_ids.empty? or branch_item_ids.include? branch.branch_item_id
    branch.terms.each do |term|
      output_dir = political_entity_kind_dir.join(term.output_relative)
      output_dir.mkpath
      output_pathname = output_dir.join('popolo-m17n.json')
      query = Query.new(
        sparql_query: term.query(config),
        output_dir_pn: output_dir
      )
      if actions.include? 'update'
        query.run(wikidata_client: wikidata_client)
      end

      next unless actions.include?('build')
      membership_rows = wikidata_results_parser.parse(query.last_saved_results)

      membership_data = MembershipData.new(membership_rows, wikidata_labels, political_entity_kind, term)

      # We should have all the relevant areas from the boundary data...
      related_positions = branch.positions_item_ids
      areas = boundary_data.popolo_areas.reject do |a|
        (a[:associated_wikidata_positions] & related_positions).empty?
      end
      # All position_item_ids should be referenced somewhere in the boundary data
      related_positions.each do |position_item_id|
        unless boundary_position_ids.include? position_item_id
          puts 'WARNING: Position %<position>s not in boundary associated_wikidata_positions' %
               { position: wikidata_labels.item_with_label(position_item_id) }
        end
      end
      known_areas = Set.new(areas.map { |a| a[:id] })
      # Make sure that all their parents are included:
      all_parents = areas.flat_map { |a| boundary_data.all_parents(a[:id]) }
      all_parents.each do |parent_area|
        next if known_areas.include? parent_area[:id]
        areas.push parent_area
        known_areas.add(parent_area[:id])
      end
      areas = areas.uniq.sort_by { |a| a[:id] }
      # Warn about any districts found from Wikidata that aren't in
      # in our boundary data:
      membership_rows.select { |m| m[:district] }.map do |m|
        area_wikidata_id = m[:district].value
        next if known_areas.include?(area_wikidata_id)
        puts "WARNING: the district %<district>s wasn't found in the boundary data for position %<position>s" %
             { district: wikidata_labels.item_with_label(area_wikidata_id),
               position: wikidata_labels.item_with_label(m[:role]&.value), }
      end

      # Check that none of these have a null person_id - we should only
      # allow that for the whole-country area.
      areas_with_bad_parents = areas.select do |area|
        area[:parent_id].nil? && !area[:id] == config.country_wikidata_id
      end
      unless areas_with_bad_parents.empty?
        areas_with_bad_parents.each do |area|
          puts "Error: no parent area found for: #{area[:id]}"
        end
        raise 'Some areas has a null parent_id'
      end

      branch_entity = branch.as_popolo_json(wikidata_labels)

      unless branch_entity[:area_id]
        puts 'ERROR: no P1001 (applies to jurisdiction) on %<kind>s %<organization>s' %
             { kind: political_entity_kind, organization: wikidata_labels.item_with_label(branch_entity[:id]) }
        exit(1)
      end

      all_data = {
        persons: membership_data.persons,
        organizations: [branch_entity] + membership_data.party_organizations,
        areas: areas,
        memberships: membership_data.memberships,
      }

      output_pathname.write(JSON.pretty_generate(all_data) + "\n")
    end
  end
end

def config_pathname
  in_gem_config = Pathname.new(__dir__).join('..', 'integrity-config.yml')
  current_dir_config = Pathname.new('.integrity-config.yml')
  return current_dir_config if current_dir_config.exist?
  in_gem_config
end

if actions.include?('check')
  files = Pathname.glob(root_dir + '**/*')
  config = Commons::Integrity::Config.new(config_pathname)
  errors = files.flat_map do |file|
    Commons::Integrity::Report.new(file: file, config: config).errors
  end
  unless errors.empty?
    puts 'Integrity checks failed:'
    puts errors
    exit(1)
  end
end
